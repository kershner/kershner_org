# Disable emitting nginx version in the "Server" response header field
server_tokens off;

access_log /var/log/nginx/kershner_org.access.log;
error_log  /var/log/nginx/kershner_org.error.log;

# Define an "upstream" block for Gunicorn.
# - This allows Nginx to pool and reuse TCP connections to Gunicorn
#   instead of opening a brand-new connection for every request.
# - Without this, under load you quickly run out of sockets, get resets (ConnectionReset/SSLEOF).
# - keepalive 64 means up to 64 idle Gunicorn connections stay open and ready.
upstream app_backend {
  server 127.0.0.1:8000;
  keepalive 64;
}

# Return 444 if no Host header
server {
  listen 80 default_server;
  return 444;
}

# Redirect ScreenBloom (HTTP)
server {
  listen 80;
  server_name screenbloom.com www.screenbloom.com;
  return 307 https://kershner.org/screenbloom;
}

# Redirect ScreenBloom (HTTPS)
server {
  listen 443 ssl;
  server_name screenbloom.com www.screenbloom.com;

  ssl_certificate /etc/letsencrypt/live/screenbloom.com/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/screenbloom.com/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  return 307 https://kershner.org/screenbloom;
}

# Redirect all HTTP to HTTPS (both www and non-www)
server {
  listen 80;
  server_name kershner.org www.kershner.org;
  return 301 https://$host$request_uri;
}

# ðŸ”„ Optional: Force www â†’ non-www or vice versa
# Example: force www.kershner.org â†’ kershner.org
server {
  listen 443 ssl;
  server_name www.kershner.org;
  return 301 https://kershner.org$request_uri;

  ssl_certificate /etc/letsencrypt/live/www.kershner.org/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/www.kershner.org/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}

# Main HTTPS server for kershner.org
server {
  listen 443 ssl;  # (Optional) add 'http2' here if desired: 'listen 443 ssl http2;'
  server_name kershner.org;

  ssl_certificate /etc/letsencrypt/live/www.kershner.org/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/www.kershner.org/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  proxy_intercept_errors on;  # intercept upstream 4xx/5xx for this vhost

  location / {
    # Use the upstream block with keep-alive pool defined above
    proxy_pass http://app_backend;

    # Forward essential headers
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # Enable HTTP/1.1 and clear Connection header
    # - This is required for Nginx â†’ Gunicorn keep-alive to work.
    # - Prevents Nginx from closing the socket after each request.
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    # Timeouts: prevent hung connections from tying up sockets
    # - proxy_connect_timeout: how long to wait to connect to Gunicorn
    # - proxy_send_timeout: max time to send request to Gunicorn
    # - proxy_read_timeout: max time to wait for Gunicorn to respond
    # Without sane timeouts, under load you can accumulate stuck sockets and crash.
    proxy_connect_timeout 5s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    proxy_redirect off;
  }

  # Default document root (used for error pages etc.)
  root /home/ubuntu/kershner/templates;

  # Custom error pages (explicit status preservation)
  error_page 404 =404 /error/404.html;
  error_page 403 405 500 501 502 503 504 =500 /error/generic_error_page.html;

  # Map the internal files and fail loudly if missing
  location = /error/404.html {
    internal;
    try_files /error/404.html =500;
  }
  location = /error/generic_error_page.html {
    internal;
    try_files /error/generic_error_page.html =500;
  }

  # Hint to browser to preconnect to CloudFront CDN
  add_header Link "<https://djfdm802jwooz.cloudfront.net>; rel=preconnect; crossorigin=anonymous";
}
