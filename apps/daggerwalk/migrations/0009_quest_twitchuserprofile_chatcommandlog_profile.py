# Generated by Django 4.2 on 2025-09-14 20:04

from django.db import migrations, models
import django.db.models.deletion
from django.utils import timezone
import random

def rand_quest_giver_img_number():
    return random.randint(1, 502)  

def backfill_profiles_for_chat_logs(apps, schema_editor):
    ChatCommandLog = apps.get_model('daggerwalk', 'ChatCommandLog')
    TwitchUserProfile = apps.get_model('daggerwalk', 'TwitchUserProfile')

    usernames = (
        ChatCommandLog.objects
        .filter(profile__isnull=True)
        .exclude(user__isnull=True)
        .exclude(user='')
        .values_list('user', flat=True)
        .distinct()
    )

    for username in usernames:
        if not username:
            continue
        orig = username.strip()
        if not orig:
            continue

        # Earliest chat command timestamp for this username (case-insensitive)
        earliest_ts = (
            ChatCommandLog.objects
            .filter(user__iexact=orig)
            .order_by('timestamp')
            .values_list('timestamp', flat=True)
            .first()
        ) or timezone.now()

        # Find or create the profile
        profile = TwitchUserProfile.objects.filter(twitch_username__iexact=orig).first()
        if not profile:
            # Create with created_at set to earliest_ts
            profile = TwitchUserProfile(twitch_username=orig, created_at=earliest_ts)
            profile.save(force_insert=True)
        else:
            # If the profile exists but has a later created_at, move it back to earliest_ts
            if profile.created_at is None or profile.created_at > earliest_ts:
                TwitchUserProfile.objects.filter(pk=profile.pk).update(created_at=earliest_ts)

        # Link all logs for this username that don't have a profile yet
        ChatCommandLog.objects.filter(profile__isnull=True, user__iexact=orig).update(profile=profile)


def noop_reverse(apps, schema_editor):
    # Keep links intact on reverse. If you want to undo, uncomment:
    # ChatCommandLog = apps.get_model('daggerwalk', 'ChatCommandLog')
    # ChatCommandLog.objects.update(profile=None)
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('daggerwalk', '0008_chatcommandlog_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Quest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, default='')),
                ('quest_giver_name', models.CharField(max_length=100, blank=True, default="")),
                ('quest_giver_img_number', models.PositiveSmallIntegerField(
                    default=rand_quest_giver_img_number,
                    validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(502)],
                    help_text='1â€“502',
                )),
                ('status', models.CharField(
                    choices=[('available', 'Available'), ('in_progress', 'In Progress'),
                             ('completed', 'Completed'), ('disabled', 'Disabled')],
                    db_index=True, default='available', max_length=20
                )),
                ('xp', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('poi', models.ForeignKey(
                    blank=True, null=True,
                    on_delete=models.deletion.SET_NULL,
                    related_name='quests',
                    to='daggerwalk.poi'
                )),
            ],
        ),
        migrations.CreateModel(
            name='TwitchUserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('twitch_username', models.CharField(db_index=True, max_length=50, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_quests', models.ManyToManyField(blank=True, related_name='completed_by', to='daggerwalk.quest')),
            ],
        ),
        migrations.AddField(
            model_name='chatcommandlog',
            name='profile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chat_command_logs', to='daggerwalk.twitchuserprofile'),
        ),
        migrations.RunPython(backfill_profiles_for_chat_logs, noop_reverse),
    ]
